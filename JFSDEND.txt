
1. Project Setup
Create a Maven project in your IDE with Spring Boot dependencies.
Add the following dependencies in your pom.xml:
xml
Copy code
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
</dependencies>
2. Database Configuration
Update the application.properties file:

properties
Copy code
spring.datasource.url=jdbc:mysql://localhost:3306/labexam
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
Create the labexam database in MySQL and manually insert some records into the book table.

3. Package Structure
rust
Copy code
com.klef.jfsd.exam
controller
model
repository
service
service.impl
4. Code Implementation
4.1. Model Class
Book.java

java
Copy code
package com.klef.jfsd.exam.model;

import jakarta.persistence.*;

@Entity
@Table(name = "book")
public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String author;
    private String genre;
    private Double price;
    private Integer publishedYear;

    // Getters and Setters
}
4.2. Repository Interface
BookRepository.java

java
Copy code
package com.klef.jfsd.exam.repository;

import com.klef.jfsd.exam.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BookRepository extends JpaRepository<Book, Long> {
}
4.3. Service Interface
BookService.java

java
Copy code
package com.klef.jfsd.exam.service;

import com.klef.jfsd.exam.model.Book;

public interface BookService {
    Book updateBook(Long id, Book book);
}
4.4. Service Implementation
BookServiceImpl.java

java
Copy code
package com.klef.jfsd.exam.service.impl;

import com.klef.jfsd.exam.model.Book;
import com.klef.jfsd.exam.repository.BookRepository;
import com.klef.jfsd.exam.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class BookServiceImpl implements BookService {

    @Autowired
    private BookRepository bookRepository;

    @Override
    public Book updateBook(Long id, Book book) {
        Optional<Book> existingBookOpt = bookRepository.findById(id);
        if (existingBookOpt.isPresent()) {
            Book existingBook = existingBookOpt.get();
            existingBook.setTitle(book.getTitle());
            existingBook.setAuthor(book.getAuthor());
            existingBook.setGenre(book.getGenre());
            existingBook.setPrice(book.getPrice());
            existingBook.setPublishedYear(book.getPublishedYear());
            return bookRepository.save(existingBook);
        } else {
            throw new RuntimeException("Book not found with ID: " + id);
        }
    }
}
4.5. Controller
BookController.java

java
Copy code
package com.klef.jfsd.exam.controller;

import com.klef.jfsd.exam.model.Book;
import com.klef.jfsd.exam.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/books")
public class BookController {

    @Autowired
    private BookService bookService;

    @PutMapping("/{id}")
    public ResponseEntity<Book> updateBook(@PathVariable Long id, @RequestBody Book book) {
        Book updatedBook = bookService.updateBook(id, book);
        return ResponseEntity.ok(updatedBook);
    }
}
5. Manually Insert Records
Execute the following SQL commands in MySQL:

sql
Copy code
INSERT INTO book (title, author, genre, price, published_year) VALUES
('Book A', 'Author A', 'Fiction', 500.0, 2020),
('Book B', 'Author B', 'Non-Fiction', 300.0, 2019);
6. Testing with Postman
Start the Spring Boot application.
Use Postman to test the PUT request:
Endpoint: http://localhost:8080/api/books/{id}
Method: PUT
Body (JSON):
json
Copy code
{
    "title": "Updated Book",
    "author": "Updated Author",
    "genre": "Updated Genre",
    "price": 450.0,
    "publishedYear": 2021
}
